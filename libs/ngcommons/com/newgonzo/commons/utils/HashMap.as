package com.newgonzo.commons.utils{	import com.newgonzo.commons.utils.ArrayUtil;		/**	 * Java-style HashMap implementation	 * 	 * @author john	 */	public class HashMap	{		private var hashKeys:Array;		private var hashValues:Array;				/**		 * 		 * @param initobject An object (associative array) or HashMap to create the HashMap from.		 */		public function HashMap(initobject:Object = null)		{			this.hashKeys = new Array();			this.hashValues = new Array();						if(initobject)			{				this.putAll(initobject);			}		}				/**		 * Get the number of current hash table mappings		 * 		 * @return The number of members in this HashMap		 */		public function size():Number		{			return this.hashKeys.length;		}				/**		 * Fetch a value from the table		 * 		 * @param key The key to fetch the data for		 * 		 * @return The value associated with the specified key		 */		public function get(key:*):*		{			if(key is Number)			{				return this.hashValues[key];			}						var n:Number = ArrayUtil.indexOf(this.hashKeys, key);			return this.hashValues[n];		}				/**		 * Adds an entry to the table		 * 		 * @param key The key to associate the value with		 * @param value		 */		public function put(key:*, value:*):void		{			if(this.containsKey(key))			{				this.hashValues[ArrayUtil.indexOf(this.hashKeys, key)] = value;			}			else			{				this.hashKeys.push(key);				this.hashValues.push(value);			}		}				/**		 * Removes an entry from the table		 * 		 * @param key The key and value to remove		 * @return The value associated with the key specified to remove		 */		public function remove(key:*):*		{			var n:Number = ArrayUtil.indexOf(this.hashKeys, key);						this.hashKeys.splice(n, 1);			return this.hashValues.splice(n, 1)[0];		}				/**		 * Resets the entire table		 */		public function clear():void		{			this.hashKeys = new Array();			this.hashValues = new Array();		}				/**		 * Determines whether the hash contains a given key		 * 		 * @param key The key to search for		 * @return true if found, false if otherwise		 */		public function containsKey(key:*):Boolean		{			return ArrayUtil.indexOf(this.hashKeys, key) != -1;		}				/**		 * Determines whether a given value exists in the hash		 * 		 * @param value The value to search for		 * @return true if found, false if otherwise		 */		public function containsValue(value:*):Boolean		{			return ArrayUtil.indexOf(this.hashValues, value) != -1;		}				/**		 * Determines whether the HashMap is empty.		 * 		 * @return true if the map is empty		 */		public function isEmpty():Boolean		{			return this.hashKeys.length == 0;		}				/**		 * Places a reference to every member of the table on a given object		 * Especially handy for using a HashMap to aggregate data that will end up on 		 * a LoadVars request		 * 		 * @param target The object to map the data onto		 */		public function mapTo(target:Object):void		{					for(var i:Number=0; i<this.hashKeys.length; i++)			{				var sKey:Object = this.hashKeys[i];				var mValue:Object = this.hashValues[i];					target[sKey] = mValue;			}		}				/**		 * Creates an Object that can be iterated over with a for..in loop		 * 		 */		public function getIterator():Object		{			return this.toObject();		}				/**		 * Populates the table from an arbitrary object		 * 		 * @param source The source of the data for the table		 */		private function fromObject(source:Object):void		{			for(var sKey:String in source)			{				this.put(sKey, source[sKey]);			}		}				private function fromHash(source:HashMap):void		{			this.fromObject(source.toObject());		}				/**		 * Adds all the mappings from <code>source</code> to		 * this hash map.		 * 		 * @param source Can be of type Object or of type HashMap		 */		public function putAll(source:Object):void		{			if(source is HashMap)			{				this.fromHash(HashMap(source));			}			else			{				this.fromObject(source);			}		}				/**		 * Retrieves an unmapped array of values		 * 		 * @return An array of the hash table members		 */		 public function toArray():Array		 {			return this.hashValues;		 }		 		 /**		  * Converts the HashMap to a hashed Object		  * 		  * @return Object		  */		 public function toObject():Object		 {			var o:Object = new Object();			this.mapTo(o);			return o;		 }		 		 /**		  * Returns a string representation of this hash table in the form		  * HashMap ["key0" => "value0", "key1" => "value1"] and so on.		  * 		  * @return String		  */		 public function toString():String		 {			var s:String = "HashMap: [";						for(var i:Number=0; i<this.hashKeys.length; i++)			{				s += "\"" + this.hashKeys[i] + "\" => \"" + this.hashValues[i] + "\"";								if(i != this.hashKeys.length -1)				{					s += ", ";				}			}						s += "]";			return s;		 }		 		 /**		  * Retrieves an array of the values in the hash table		  * 		  * @return The array of value objects		  */		 public function getValues():Array		 {			return this.hashValues;		 }		 		 /**		  * Retrieves an array of the keys of the hash table		  * 		  * @return An array of keys		  */		 public function getKeys():Array		 {			return this.hashKeys;		 }	}}