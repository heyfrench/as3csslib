package com.newgonzo.commons.css{	import com.newgonzo.commons.css.sac.*;	import com.newgonzo.commons.css.parser.*;	import com.newgonzo.commons.parsing.*;	import com.newgonzo.commons.css.dom.*;	import flash.utils.getTimer;	import flash.display.MovieClip;		public class CSSParserTest extends MovieClip implements IDocumentHandler	{			private var xml:XML = <E>									<E>									</E>									<E foo="someFoo bar baz"></E>									<E>										<E/>										<F>											<E foo="nestedFoo" bar="nestedBar"/>										</F>										<E/>									</E>									<F class="warning"></F>									<G/>									<E class="warning red"></E>									<E id="myid" class="identified">										<E foo="bar">sup dawg</E>										<K class="warning red closed"/>									</E>									<G foo="bar" baz="balls" crud="poo"/>									<J>										<L num="one"/>										<L num="two"/>										<L num="three"/>										<L num="four"/>									</J>								</E>;						public function CSSParserTest()		{			XML.prettyIndent = 8;						var startTime:int = getTimer();						trace("***************************** START TEST (" + startTime + ")************************************");						test("*");			test("*[foo]");			test("[foo]");			test(".warning");			test("E.warning.red");			test("e.warning.red");			test(".warning.red");			test(".warning.red.closed");			test("E");			test("E[foo][bar]");			test("G[foo=bar][baz=balls][crud='poo']");			test("E[foo=\"bar\"]");			test("E[foo~=\"bar\"]");			test("E[foo^=\"some\"]");			test("E[foo$=\"Foo\"]");			test("E[foo*=\"bar\"]");			test("E[hreflang|=\"en\"]");			test("E:root");			test("E:empty");			test("E:nth-child(2n+1)");			//test("E:first-child   /* with an inline comment */");						test("*:only-child");			test("k:only-of-type");						//test("*:not(E)");			test("E F");			test("E > F");			test("E + F");			test("E ~ F");			test("E:lang(fr)");			test("E::first-line");			test("E.warning");			test("E#myid");						test("E.someClass, F > G, H[foo=bar][baz='bong']");						//test("html|tr:nth-child(-n+6)");			test("E[version=\"1.0\"]");						test("P:lang(fr).p1");						test("#myid.identified { background: url(\"will get gobbled up\"); } [class$=ing] { someStyle: for you;}");						test("e:root");						var endTime:int = getTimer();						trace("***************************** END TEST (" + endTime + ")************************************");			trace("***************************** TOTAL (" + (endTime - startTime) + ")************************************");		}				private function test(css:String):void		{						trace("*************************************** Testing " + css + " ******************************");						var parser:CSSParser = new CSSParser();			parser.documentHandler = this;			parser.parse(css);						}				public function startDocument(source:String):void		{			trace("=========================== Start document " + source + " ===========================");		}				public function endDocument(source:String):void		{			trace("=========================== End document " + source + " ===========================");		}				public function startSelector(selectors:ISelectorList):void		{			trace("=========================== Start selector " + selectors + " ===========================");						if(!xml) return;						var results:XMLList = CSSSelectorQuery.execQuery(selectors, xml);						//trace("=========================== Results (" + results.length() + ") ===========================");			//trace(results.toXMLString());		}				public function endSelector(selectors:ISelectorList):void		{			trace("=========================== End selector " + selectors + " ===========================");		}				public function property(name:String, value:Object, important:Boolean):void		{			trace("property(" + arguments + ")");		}				public function comment(source:String):void		{			trace("=========================== Comment: " + source + " ===========================");		}	}}